<%# vim: filetype=eruby.html

Copyright (c) 2012 RightScale, Inc.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
%>

<h2>Cookbooks Dependencies Tree</h2>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary btn-normal" data-toggle="modal" data-target="#dependenciesTree">
  Show cookbooks dependencies tree
</button>

<!-- Modal -->
<div class="modal fade" id="dependenciesTree" tabindex="-1" role="dialog" aria-labelledby="dependenciesTreeLabel">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="dependenciesTreeLabel">Cookbooks dependency tree</h4>
      </div>
      <div class="modal-body">
        Double click on node to open cookbook documentation.
      </div>
    </div>
  </div>
</div>


<h2>Cookbooks List</h2>
<table>
  <thead>
    <tr>
      <th>Cookbook</th>
      <th>Description</th>
      <th>Version</th>
    </tr>
  </thead>
  <tbody>
  <% n = 1 %>
  <% @cookbooks.each do |cookbook| %>
    <tr class="r<%= n %>">
      <td><%= linkify cookbook %></td>
      <td><%= htmlify cookbook.short_desc %></td>
      <td><%= cookbook.version %></td>
    </tr>
    <% n = n == 2 ? 1 : 2 %>
  <% end %>
  </tbody>
</table>

<!--
<script>

  // http://blog.thomsonreuters.com/index.php/mobile-patent-suits-graphic-of-the-day/
  var links = [
<% @cookbooks.each do |cookbook| %>
  <% cookbook.dependencies.each do |dependency|%>
          {source: "<%= cookbook.name %>", target: "<%= dependency.name %>", type: "dependency"},
  <% end %>
<% end %>
  ];

  var nodes = {};

  // Compute the distinct nodes from the links.
  links.forEach(function(link) {
    link.source = nodes[link.source] || (nodes[link.source] = {name: link.source});
    link.target = nodes[link.target] || (nodes[link.target] = {name: link.target});
  });

  var margin = {top: -5, right: -5, bottom: -5, left: -5},
          width = "960",
          height = "900";

  var zoom = d3.behavior.zoom()
          .scaleExtent([1, 10])
          .on("zoom", zoomed);

  var force = d3.layout.force()
          .nodes(d3.values(nodes))
          .links(links)
          .size([width, height])
          .linkDistance(90)
          .charge(-300)
          .on("tick", tick)
          .start();

  var drag = force.drag()
          .on("dragstart", dragstart);

  var svg = d3.select("span#graph").append("svg");

  // define arrow markers for graph links
  svg.append('svg:defs').append('svg:marker')
          .attr('id', 'end-arrow')
          .attr('viewBox', '0 -5 10 10')
          .attr('refX', 6)
          .attr('markerWidth', 3)
          .attr('markerHeight', 3)
          .attr('orient', 'auto')
          .append('svg:path')
          .attr('d', 'M0,-5L10,0L0,5')
          .attr('fill', '#000');

  svg.attr("width", width)
          .attr("height", height)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.right + ")")
          .call(zoom)
          .on("dblclick.zoom", null);

  var link = svg.selectAll(".link")
          .data(force.links())
          .enter().append("line")
          .attr("class", "link");

  var node = svg.selectAll(".node")
          .data(force.nodes())
          .enter().append("g")
          .attr("class", "node")
          .on("mouseover", mouseover)
          .on("mouseout", mouseout)
          .on("dblclick", dblclick)
          .call(drag)
          .call(force.drag);

  node.append("circle")
          .attr("r", 8);

  node.append("text")
          .attr("x", 12)
          .attr("dy", ".35em")
          .text(function(d) { return d.name; });

  function tick() {
    link.attr("x1", function(d) { return d.source.x; })
          .attr("y1", function(d) { return d.source.y; })
          .attr("x2", function(d) { return d.target.x; })
          .attr("y2", function(d) { return d.target.y; });
    node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
  }

  function zoomed() {
    svg.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
  }
  function dblclick(d) {
    d3.select(this).classed("fixed", d.fixed = false);
  }

  function mouseover() {
    d3.select(this).select("circle").transition()
            .duration(750)
            .attr("r", 16);
  }

  function mouseout() {
    d3.select(this).select("circle").transition()
            .duration(750)
            .attr("r", 8);
  }

  function dragstart(d) {
    d3.event.sourceEvent.stopPropagation();
    d3.select(this).classed("fixed", d.fixed = true);
  }

</script>
-->




<%
   cookbooks = @cookbooks
%>

<script>
  var treeData = [
    {
      "name": "cookbooks",
      "parent": "null",
      "children": [
        <% while (cookbook = cookbooks.pop) do %>
        {
          "name": "<%= cookbook.name %>",
          "parent": "cookbooks",
           <% dependencies = cookbook.dependencies.map {|d| d}
           if dependencies.size > 0
           %>
             "children": [
               <%
               while(dependency = dependencies.pop)%>
               {
                 "name": "<%= dependency.name %>",
                 "parent": "<%= cookbook.name %>"
               }<%= ',' if dependencies.size > 0 %>
               <% end %>
             ]
          <% end %>
        }<%= ',' if cookbooks.size > 0 %>
        <% end %>
      ]
    }
  ];
  // ************** Generate the tree diagram	 *****************
  var margin = {top: 20, right: 120, bottom: 20, left: 120},
          width = 1024 - margin.right - margin.left,
          height = 800 - margin.top - margin.bottom;

  var i = 0,
          duration = 750,
          root;

  var tree = d3.layout.tree()
          .size([height, width]);

  var diagonal = d3.svg.diagonal()
          .projection(function(d) { return [d.y, d.x]; });

  var svg = d3.select("div.modal-body").append("svg")
          .attr("width", width + margin.right + margin.left)
          .attr("height", height + margin.top + margin.bottom)
          .append("g")
          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  root = treeData[0];
  root.x0 = height / 2;
  root.y0 = 0;

  function collapse(d) {
    if (d.children) {
      d._children = d.children;
      d._children.forEach(collapse);
      d.children = null;
    }
  }

  root.children.forEach(collapse);
  update(root);

  d3.select(self.frameElement).style("height", "800px");

  function update(source) {

    // Compute the new tree layout.
    var nodes = tree.nodes(root).reverse(),
            links = tree.links(nodes);

    // Normalize for fixed-depth.
    nodes.forEach(function(d) { d.y = d.depth * 180; });

    // Update the nodes…
    var node = svg.selectAll("g.node")
            .data(nodes, function(d) { return d.id || (d.id = ++i); });

    // Enter any new nodes at the parent's previous position.
    var nodeEnter = node.enter().append("g")
            .attr("class", "node")
            .attr("transform", function(d) { return "translate(" + source.y0 + "," + source.x0 + ")"; })
            .on("click", click)
            .on("dblclick", cookbook_click);

    nodeEnter.append("circle")
            .attr("r", 1e-6)
            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

    nodeEnter.append("text")
            .attr("x", function(d) { return 10; })
            .attr("y", function(d) { return -6; })
            .attr("dy", ".35em")
            .attr("text-anchor", function(d) { return "start"; })
            .text(function(d) { return d.name; })
            .style("fill-opacity", 1e-6);

    // Transition nodes to their new position.
    var nodeUpdate = node.transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; });

    nodeUpdate.select("circle")
            .attr("r", 7)
            .style("fill", function(d) { return d._children ? "lightsteelblue" : "#fff"; });

    nodeUpdate.select("text")
            .style("fill-opacity", 1);

    // Transition exiting nodes to the parent's new position.
    var nodeExit = node.exit().transition()
            .duration(duration)
            .attr("transform", function(d) { return "translate(" + source.y + "," + source.x + ")"; })
            .remove();

    nodeExit.select("circle")
            .attr("r", 1e-6);

    nodeExit.select("text")
            .style("fill-opacity", 1e-6);

    // Update the links…
    var link = svg.selectAll("path.link")
            .data(links, function(d) { return d.target.id; });

    // Enter any new links at the parent's previous position.
    link.enter().insert("path", "g")
            .attr("class", "link")
            .attr("d", function(d) {
              var o = {x: source.x0, y: source.y0};
              return diagonal({source: o, target: o});
            });

    // Transition links to their new position.
    link.transition()
            .duration(duration)
            .attr("d", diagonal);

    // Transition exiting nodes to the parent's new position.
    link.exit().transition()
            .duration(duration)
            .attr("d", function(d) {
              var o = {x: source.x, y: source.y};
              return diagonal({source: o, target: o});
            })
            .remove();

    // Stash the old positions for transition.
    nodes.forEach(function(d) {
      d.x0 = d.x;
      d.y0 = d.y;
    });
  }

  // Toggle children on click.
  function click(d) {
    if (d.children) {
      d._children = d.children;
      d.children = null;
    } else {
      d.children = d._children;
      d._children = null;
    }
    update(d);
  }
  // Toggle children on click.
  function cookbook_click(d) {
    window.location.href = "chef/" + d.name + ".html";
  }
</script>